"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[222],{20011:e=>{e.exports=JSON.parse('{"functions":[{"name":"init","desc":"Initialization function. Starts the fsPanel server-sided process- determining which users are authorized, and which ones aren\'t.\\n```lua\\nlocal fsPanel = require(path.to.fsPanel)\\n\\nfsPanel.Server.init({\\n\\tplayerAuthFunction = function(plr)\\n\\t\\tif plr.Name == \\"AdminDevPerson\\" then\\n\\t\\t\\treturn true\\n\\t\\tend\\n\\tend,\\n\\n\\t-- etc.\\n})\\n```","params":[{"name":"serverConfig","desc":"","lua_type":"serverConfig"}],"returns":[{"desc":"","lua_type":"void"}],"function_type":"static","source":{"line":76,"path":"src/Server/init.luau"}},{"name":"isPlayerAuthorized","desc":"Gets whether or not a specific player is authorized to see the debug panel.\\n```lua\\nlocal Players = game.Players:GetPlayers()\\n\\nlocal randomPlayer = Players[math.random(1, #Players)]\\n\\nlocal isRandomPlayerAuthorized = fsPanel.Server.isPlayerAuthorized(randomPlayer)\\n\\nprint(isRandomPlayerAuthorized) -- \\"true\\" or \\"false\\"\\n```","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":94,"path":"src/Server/init.luau"}},{"name":"getServerStats","desc":"Retrieves the server stats without any formatting in raw numbers.\\n```lua\\nlocal fsPanel = require(path.to.fsPanel)\\n\\nwhile task.wait(1) do\\n\\tlocal currentServerStats = fsPanel.Server.getServerStats()\\n\\n\\tif currentServerStats.ServerFps < 30 then\\n\\t\\tprint(\\"The server is lagging!\\")\\n\\telse\\n\\t\\tprint(\\"The server is fine.\\")\\n\\tend\\nend\\n```","params":[],"returns":[{"desc":"","lua_type":"serverStats"}],"function_type":"static","source":{"line":116,"path":"src/Server/init.luau"}},{"name":"updateValue","desc":"Updates an already-created replicated value (created in `fsPanel.Server.init()`) to a new value. This new value can be\\nany replictable data type.\\n```lua\\nlocal fsPanel = require(path.to.fsPanel)\\n\\nfsPanel.Server.updateValue(\\"valueName\\", 50) -- sets valueName to 50\\n```","params":[],"returns":[{"desc":"","lua_type":"serverStats"}],"function_type":"static","source":{"line":131,"path":"src/Server/init.luau"}}],"properties":[],"types":[{"name":"serverConfig","desc":"\\tplayerAuthFunction: ((player: Player) -> boolean)?,\\n\\tdebugActions: { [string]: (player: Player) -> () }?,\\n\\treplicatedValues: { [string]: any }?\\n}\\n\\nConfiguration for `fsPanel.Server.init()`\\nExample:\\n```lua\\nlocal configurationForServer = {\\n\\n\\tdebugActions = {\\n\\t\\ttestAction = function(player)\\n\\t\\t\\tprint(`Hello { player.Name }`)\\n\\t\\tend\\n\\t},\\n\\n\\tplayerAuthFunction = function()\\n\\t\\treturn true\\n\\tend,\\n\\n\\treplicatedValues = {\\n\\t\\ttestValue = 5\\n\\t}\\n\\n}\\n```","lua_type":"{","source":{"line":41,"path":"src/Server/init.luau"}},{"name":"serverStats","desc":"\\tDataReceiveKbps: number,\\n\\tDataSendKbps: number,\\n\\tHeartbeatTimeMs: number,\\n\\tPhysicsStepTimeMs: number,\\n\\tServerFps: number,\\n\\tTotalMemoryUsageMb: number,\\n}","lua_type":"{","source":{"line":53,"path":"src/Server/init.luau"}}],"name":"Server","desc":"The server namespace contains all the functions exported by the library that are specifically for the server instance.","source":{"line":10,"path":"src/Server/init.luau"}}')}}]);