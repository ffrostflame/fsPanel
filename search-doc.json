[{"title":"Client","type":0,"sectionRef":"#","url":"/DebugLibraryUnnamed/api/Client","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Client","url":"/DebugLibraryUnnamed/api/Client#types","content":" "},{"title":"clientConfig​","type":1,"pageTitle":"Client","url":"/DebugLibraryUnnamed/api/Client#clientConfig","content":"&lt;/&gt; type clientConfig = {} toggleKeys: { [number]: Enum.KeyCode } } Configuration for fsPanel.Server.init() Example: local clientConfiguration = { toggleKeys = { Enum.KeyCode.F2 } }  "},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/DebugLibraryUnnamed/api/Client#functions","content":" "},{"title":"init​","type":1,"pageTitle":"Client","url":"/DebugLibraryUnnamed/api/Client#init","content":"&lt;/&gt; Client.init(clientConfig: clientConfig) → void Initialization function. Starts &amp; creates the fsPanel client-sided UI- determining which users are authorized, and which ones aren't. local fsPanel = require(path.to.fsPanel) fsPanel.Client.init({ toggleKeys = { Enum.KeyCode.F1 } })  "},{"title":"Installation","type":0,"sectionRef":"#","url":"/DebugLibraryUnnamed/docs/Installation","content":"","keywords":""},{"title":"With Wally​","type":1,"pageTitle":"Installation","url":"/DebugLibraryUnnamed/docs/Installation#with-wally","content":"Install WallyPut fsPanel in the wally.toml file under [dependencies] wally.toml [dependencies] BridgeNet2 = ffrostflame/fspanel@0.1.0  Run wally install "},{"title":"Without Wally​","type":1,"pageTitle":"Installation","url":"/DebugLibraryUnnamed/docs/Installation#without-wally","content":""},{"title":"Option 1: Syncing with .rbxm:​","type":1,"pageTitle":"Installation","url":"/DebugLibraryUnnamed/docs/Installation#option-1-syncing-with-rbxm","content":"Get the .rbxm file from the latest release.Sync manually or drop into studio manually "},{"title":"Option 2: copying source folder:​","type":1,"pageTitle":"Installation","url":"/DebugLibraryUnnamed/docs/Installation#option-2-copying-source-folder","content":"Copy the src folder of the repositoryDrop into your projectRename the folder to fsPanel "},{"title":"fsPanel","type":0,"sectionRef":"#","url":"/DebugLibraryUnnamed/docs/intro","content":"","keywords":""},{"title":"Game Stats​","type":1,"pageTitle":"fsPanel","url":"/DebugLibraryUnnamed/docs/intro#game-stats","content":"fsPanel allows the addition of custom statistics that can be monitored from the debug panel. "},{"title":"Server Stats​","type":1,"pageTitle":"fsPanel","url":"/DebugLibraryUnnamed/docs/intro#server-stats","content":"fsPanel allows for easy monitoring of server statistics from the Stats service, such as memory usage, server FPS, and the amount of data being sent and received by a client. "},{"title":"Debug Actions​","type":1,"pageTitle":"fsPanel","url":"/DebugLibraryUnnamed/docs/intro#debug-actions","content":"fsPanel allows implementation of debug functions that can be triggered from the debug panel. "},{"title":"Server","type":0,"sectionRef":"#","url":"/DebugLibraryUnnamed/api/Server","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#types","content":" "},{"title":"serverConfig​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#serverConfig","content":"&lt;/&gt; type serverConfig = {} playerAuthFunction: ((player: Player) -&gt; boolean)?, debugActions: { [string]: (player: Player) -&gt; () }?, replicatedValues: { [string]: any }? } Configuration for fsPanel.Server.init() Example: local configurationForServer = { debugActions = { testAction = function(player) print(`Hello { player.Name }`) end }, playerAuthFunction = function() return true end, replicatedValues = { testValue = 5 } }   "},{"title":"serverStats​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#serverStats","content":"&lt;/&gt; type serverStats = {} DataReceiveKbps: number, DataSendKbps: number, HeartbeatTimeMs: number, PhysicsStepTimeMs: number, ServerFps: number, TotalMemoryUsageMb: number, } "},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#functions","content":" "},{"title":"init​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#init","content":"&lt;/&gt; Server.init(serverConfig: serverConfig) → void Initialization function. Starts the fsPanel server-sided process- determining which users are authorized, and which ones aren't. local fsPanel = require(path.to.fsPanel) fsPanel.Server.init({ playerAuthFunction = function(plr) if plr.Name == &quot;AdminDevPerson&quot; then return true end end, -- etc. })   "},{"title":"isPlayerAuthorized​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#isPlayerAuthorized","content":"&lt;/&gt; Server.isPlayerAuthorized() → boolean Gets whether or not a specific player is authorized to see the debug panel. local Players = game.Players:GetPlayers() local randomPlayer = Players[math.random(1, #Players)] local isRandomPlayerAuthorized = fsPanel.Server.isPlayerAuthorized(randomPlayer) print(isRandomPlayerAuthorized) -- &quot;true&quot; or &quot;false&quot;   "},{"title":"getServerStats​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#getServerStats","content":"&lt;/&gt; Server.getServerStats() → serverStats Retrieves the server stats without any formatting in raw numbers. local fsPanel = require(path.to.fsPanel) while task.wait(1) do local currentServerStats = fsPanel.Server.getServerStats() if currentServerStats.ServerFps &lt; 30 then print(&quot;The server is lagging!&quot;) else print(&quot;The server is fine.&quot;) end end   "},{"title":"updateValue​","type":1,"pageTitle":"Server","url":"/DebugLibraryUnnamed/api/Server#updateValue","content":"&lt;/&gt; Server.updateValue() → serverStats Updates an already-created replicated value (created in fsPanel.Server.init()) to a new value. This new value can be any replictable data type. local fsPanel = require(path.to.fsPanel) fsPanel.Server.updateValue(&quot;valueName&quot;, 50) -- sets valueName to 50  "}]